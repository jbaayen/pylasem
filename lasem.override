%%
headers
#include <Python.h>
#include <pygobject.h>
#include <pycairo.h>

extern Pycairo_CAPI_t *Pycairo_CAPI;

#include <lasem/lsmenumtypes.h>
#include <lasem/lsmmathmlactionelement.h>
#include <lasem/lsmmathmlaligngroupelement.h>
#include <lasem/lsmmathmlalignmarkelement.h>
#include <lasem/lsmmathmlattributes.h>
#include <lasem/lsmmathmldocument.h>
#include <lasem/lsmmathmlelement.h>
#include <lasem/lsmmathmlentitydictionary.h>
#include <lasem/lsmmathmlenums.h>
#include <lasem/lsmmathmlerrorelement.h>
#include <lasem/lsmmathmlfencedelement.h>
#include <lasem/lsmmathmlfractionelement.h>
#include <lasem/lsmmathmlglyphtableams.h>
#include <lasem/lsmmathml.h>
#include <lasem/lsmmathmllayoututils.h>
#include <lasem/lsmmathmlmathelement.h>
#include <lasem/lsmmathmloperatordictionary.h>
#include <lasem/lsmmathmloperatorelement.h>
#include <lasem/lsmmathmlpaddedelement.h>
#include <lasem/lsmmathmlphantomelement.h>
#include <lasem/lsmmathmlpresentationcontainer.h>
#include <lasem/lsmmathmlpresentationtoken.h>
#include <lasem/lsmmathmlradicalelement.h>
#include <lasem/lsmmathmlrowelement.h>
#include <lasem/lsmmathmlscriptelement.h>
#include <lasem/lsmmathmlspaceelement.h>
#include <lasem/lsmmathmlstringelement.h>
#include <lasem/lsmmathmlstyleelement.h>
#include <lasem/lsmmathmlstyle.h>
#include <lasem/lsmmathmltablecellelement.h>
#include <lasem/lsmmathmltableelement.h>
#include <lasem/lsmmathmltablerowelement.h>
#include <lasem/lsmmathmlunderoverelement.h>
#include <lasem/lsmmathmlutils.h>
#include <lasem/lsmmathmlview.h>
%%
modulename lasem
%%
import gobject.GObject as PyGObject_Type
%%
ignore-glob
  *_get_type
%%
override lsm_dom_view_get_size noargs
static PyObject *
_wrap_lsm_dom_view_get_size(PyGObject *self)
{
    PyObject *list;
    double width, height;

    lsm_dom_view_get_size(LSM_DOM_VIEW(self->obj), &width, &height);

    list = PyTuple_New(2);
    if (list == NULL) {
        return NULL;
    }

    PyTuple_SetItem(list, 0, PyFloat_FromDouble(width));
    PyTuple_SetItem(list, 1, PyFloat_FromDouble(height));

    return list;
}
%%
override lsm_dom_view_get_size_pixels noargs
static PyObject *
_wrap_lsm_dom_view_get_size_pixels(PyGObject *self)
{
    PyObject *list;
    int width, height;

    lsm_dom_view_get_size_pixels(LSM_DOM_VIEW(self->obj), &width, &height);

    list = PyTuple_New(2);
    if (list == NULL) {
        return NULL;
    }

    PyTuple_SetItem(list, 0, PyInt_FromLong(width));
    PyTuple_SetItem(list, 1, PyInt_FromLong(height));

    return list;
}
%%
