%%
headers
#include <Python.h>
#include <pygobject.h>
#include <pycairo.h>

extern Pycairo_CAPI_t *Pycairo_CAPI;

#include <lsmenumtypes.h>
#include <lsmmathmlactionelement.h>
#include <lsmmathmlaligngroupelement.h>
#include <lsmmathmlalignmarkelement.h>
#include <lsmmathmlattributes.h>
#include <lsmmathmldocument.h>
#include <lsmmathmlelement.h>
#include <lsmmathmlentitydictionary.h>
#include <lsmmathmlenums.h>
#include <lsmmathmlerrorelement.h>
#include <lsmmathmlfencedelement.h>
#include <lsmmathmlfractionelement.h>
#include <lsmmathmlglyphtableams.h>
#include <lsmmathml.h>
#include <lsmmathmllayoututils.h>
#include <lsmmathmlmathelement.h>
#include <lsmmathmloperatordictionary.h>
#include <lsmmathmloperatorelement.h>
#include <lsmmathmlpaddedelement.h>
#include <lsmmathmlphantomelement.h>
#include <lsmmathmlpresentationcontainer.h>
#include <lsmmathmlpresentationtoken.h>
#include <lsmmathmlradicalelement.h>
#include <lsmmathmlrowelement.h>
#include <lsmmathmlscriptelement.h>
#include <lsmmathmlspaceelement.h>
#include <lsmmathmlstringelement.h>
#include <lsmmathmlstyleelement.h>
#include <lsmmathmlstyle.h>
#include <lsmmathmltablecellelement.h>
#include <lsmmathmltableelement.h>
#include <lsmmathmltablerowelement.h>
#include <lsmmathmlunderoverelement.h>
#include <lsmmathmlutils.h>
#include <lsmmathmlview.h>
%%
modulename lasem
%%
import gobject.GObject as PyGObject_Type
%%
ignore-glob
  *_get_type
%%
override lsm_dom_view_get_size noargs
static PyObject *
_wrap_lsm_dom_view_get_size(PyGObject *self)
{
    PyObject *list;
    double width, height;

    lsm_dom_view_get_size(LSM_DOM_VIEW(self->obj), &width, &height);

    list = PyTuple_New(2);
    if (list == NULL) {
        return NULL;
    }

    PyTuple_SetItem(list, 0, PyFloat_FromDouble(width));
    PyTuple_SetItem(list, 1, PyFloat_FromDouble(height));

    return list;
}
%%
override lsm_dom_view_get_size_pixels noargs
static PyObject *
_wrap_lsm_dom_view_get_size_pixels(PyGObject *self)
{
    PyObject *list;
    int width, height;

    lsm_dom_view_get_size_pixels(LSM_DOM_VIEW(self->obj), &width, &height);

    list = PyTuple_New(2);
    if (list == NULL) {
        return NULL;
    }

    PyTuple_SetItem(list, 0, PyInt_FromLong(width));
    PyTuple_SetItem(list, 1, PyInt_FromLong(height));

    return list;
}
%%
